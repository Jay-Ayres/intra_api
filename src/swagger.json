{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Yet Another Node.js Blogg Application API",
    "description": "Yet Another Node.js Blogg Application API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": "API for users in the system"
    },
    {
      "name": "Posts",
      "description": "API for posts in the system"
    },
    {
      "name": "Events",
      "description": "API for events in the system"
    }
  ],
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/users": {
      "post": {
        "tags": ["Users"],
        "description": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "get": {
        "tags": ["Users"],
        "summary": "Get all users in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Users"],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user with given ID",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "User is deleted",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "put": {
        "summary": "Update user with give ID",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/posts": {
      "post": {
        "tags": ["Posts"],
        "description": "Create new post in system",
        "parameters": [
          {
            "name": "post",
            "in": "body",
            "description": "Post that we want to create",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New post is created",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        }
      },
      "get": {
        "tags": ["Posts"],
        "summary": "Get all posts in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Posts"
            }
          }
        }
      }
    },
    "/posts/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of post that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Posts"],
        "summary": "Get post with given ID",
        "responses": {
          "200": {
            "description": "Post is found",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete post with given ID",
        "tags": ["Posts"],
        "responses": {
          "200": {
            "description": "Post is deleted",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        }
      },
      "put": {
        "summary": "Update post with give ID",
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "post",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post is updated",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        }
      }
    },
    "/events": {
      "post": {
        "tags": ["Events"],
        "description": "Create new event in system",
        "parameters": [
          {
            "name": "event",
            "in": "body",
            "description": "Event that we want to create",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New event is created",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "get": {
        "tags": ["Events"],
        "summary": "Get all events in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Events"
            }
          }
        }
      }
    },
    "/events/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of event that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Events"],
        "summary": "Get event with given ID",
        "responses": {
          "200": {
            "description": "Event is found",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete event with given ID",
        "tags": ["Events"],
        "responses": {
          "200": {
            "description": "Event is deleted",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "put": {
        "summary": "Update event with give ID",
        "tags": ["Events"],
        "parameters": [
          {
            "name": "event",
            "in": "body",
            "description": "Event with new values of properties",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event is updated",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "required": ["email", "id"],
      "properties": {
        "id": {
          "type": "integer",
          "uniqueItems": true
        },
        "username": {
          "type": "string",
          "uniqueItems": true
        },
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "password": {
          "type": "string",
          "uniqueItems": true
        },
        "description": {
          "type": "string",
          "uniqueItems": true
        },
        "mandate": {
          "type": "string"
        },
        "technologies": {
          "type": "string"
        },
        "is_admin": {
          "type": "boolean"
        },
        "url_image": {
          "type": "string"
        }
      }
    },
    "Users": {
      "type": "array",
      "$ref": "#/definitions/User"
    },
    "Post": {
      "required": ["email", "id"],
      "properties": {
        "id": {
          "type": "integer",
          "uniqueItems": true
        },
        "name": {
          "type": "string",
          "uniqueItems": true
        },
        "description": {
          "type": "string",
          "uniqueItems": true
        },
        "url_image": {
          "type": "string"
        }
      }
    },
    "Event": {
      "required": ["email", "id"],
      "properties": {
        "id": {
          "type": "integer",
          "uniqueItems": true
        },
        "name": {
          "type": "string",
          "uniqueItems": true
        },
        "description": {
          "type": "string",
          "uniqueItems": true
        },
        "url_image": {
          "type": "string"
        },
        "event_date": {
          "type": "string"
        },
        "limit_date": {
          "type": "string"
        },
        "event_end_date": {
          "type": "string"
        }
      }
    },
    "Posts": {
      "type": "array",
      "$ref": "#/definitions/Post"
    },
    "Events": {
      "type": "array",
      "$ref": "#/definitions/Post"
    }
  }
}
